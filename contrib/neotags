#!/bin/bash

influx_port=32086
influx_host="http://localhost:$influx_port"
tagname=$2

declare -a dbs
declare -A tags

start=`date +%s`
getdbs () {
  while read db; do
    dbs+=( "$db" )
  done < <(curl -sG "$influx_host/query?pretty=true" --data-urlencode "q=show databases" | grep -E 'aggreg|lz5event_dictionary' | perl -pe 's/.*"(\S+)"/$1/g')
}

gettags () {
  getdbs
  for k in "${!dbs[@]}"
  do
    while read key; do
      value=$(curl -sG -H "Accept: application/csv" "$influx_host/query?pretty=true" \
        --data-urlencode "db=${dbs[$k]}" \
        --data-urlencode \
        "q=SHOW TAG VALUES with key=${key}" | wc -l)
      tags[$key]=$value
    done < <(curl -sG -H "Accept: application/csv" "$influx_host/query?pretty=true" \
      --data-urlencode "db=${dbs[$k]}" \
      --data-urlencode \
      "q=SHOW TAG KEYS" | cut -d ',' -f3 | tail -n +2 | grep "ut_")
  done 
}

show() {
  gettags
  for k in "${!tags[@]}"
  do
    printf "%s %s\n" "$k" "${tags[$k]}"
  done |
    sort -n -k2 | column -t -s ' '
}

clean() {
  [[ -z $tagname ]] && { echo "Usage $0 clean tagname"; exit 1; }
  getdbs
  for k in "${!dbs[@]}"
  do
    echo "Cleaning up $tagname from ${dbs[$k]}"
    if [[ ${dbs[$k]} == *"dictionary"* ]]; then
      docker exec -it lz_influxdb bash -c "influx -database ${dbs[$k]} -execute 'drop series from events where $tagname != \"\"'"
    else
      docker exec -it lz_influxdb bash -c "influx -database ${dbs[$k]} -execute 'drop series from aggregates where $tagname != \"\"'"
    fi
  done 
end=`date +%s`
runtime=$((end-start))
echo "Clean ran for $runtime seconds"
}

case $1 in
  show)
    show
    ;;
  clean)
    clean
    ;;
  *)
    echo "Usage: neotags {show|clean}"
    exit 1
esac
