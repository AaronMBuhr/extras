#!/bin/bash
if [[ $1 = "-h" ]]; then
    base=$(basename "${0}")
    echo "Usage ${base} <options>"
    echo ""
    printf "%-50s %s\n" "Mode" "Example"
    printf "%-100s\n" "-----------------------------------------------------------------"
    printf "%-50s %s\n" "Verbose Mode:" "${base} -v"
    printf "%-50s %s\n" "Debug Mode:" "${base} -d"
    printf "%-50s %s\n" "Only test given mountpoint" "${base} -m /"
    printf "%-50s %s\n" "Default, tests all detected mountpoints" "${base}"
    exit
fi

install_prereq() {
    if [ `(dpkg-query -W -f='${Status}' $1 2>/dev/null | grep -c "ok installed")` -eq 0 ]; then
        DEBIAN_FRONTEND=noninteractive
        OUTPUT=$(apt-get install -qqy --no-install-recommends $1 2>&1 >/dev/null)
        [[ $OUTPUT ]] && echo "line $LINENO: $OUTPUT"
    fi
}
install_prereq ioping
install_prereq bc

verbose=0
debug=0
[[ $1 == "-v" ]] && verbose=1
[[ $1 == "-d" ]] && debug=1
if [ -f /etc/os-release ]; then
    # special for ram disk testing:
    mountpoint='/mnt/rdisk'
    [[ -d '/mnt/rdisk' ]] && rdisk=${mountpoint}

    # special for nvme disk testing
    # TODO: add check for > 1 nvme disk
    nvme=$(blkid | grep 'nvme' | egrep -v 'EFI|LVM' | awk -F':' '{print $1}')

    if [[ $1 = "-m" ]]; then
        mountpoints=$2
    else
        mountpoints="$(cat /proc/mounts | egrep -v "fuse|boot" | grep "^/dev" | awk '{print $2}' | xargs)"
        mountpoints="$mountpoints $rdisk"
    fi
    echo "Flushing disk caches"
    sync
    echo 3 > /proc/sys/vm/drop_caches
    for mountpoint in ${mountpoints}
    do 
        disk=$(cat /proc/mounts | grep " ${mountpoint} " | awk '{print $1}')
        if [ $verbose -eq 1 ]; then
            echo
            echo "Verbose Mode, including DD  and HDParm tests"
            echo "------------${disk} (Mountpoint: ${mountpoint})-----------------------------"
            echo "Running Command: dd if=/dev/zero of=${mountpoint}/test bs=1M count=1024 conv=fdatasync"
            dd if=/dev/zero of=${mountpoint}/test bs=1M count=1024 conv=fdatasync
            rm "${mountpoint}/test"
            echo
            if [[ "${nvme}" ]]; then
                echo "Running Command: hdparm -Tt --direct ${nvme}"
                hdparm -Tt --direct "${nvme}"
            fi
            echo
        fi
        echo "## Disk: ${disk}"
        echo "## Mount: ${mountpoint}"
        for blocksize in 1k 4k 512k 1M
            # for b in 1M
        do
            if [ $verbose -eq 1 ]; then
                # Get IOPING stats in raw format:
                echo "Running Command: ioping -R -s ${blocksize} ${mountpoint}"
                ioping -R -s ${blocksize} ${mountpoint}
            else
                # Get IOPING stats in raw format:
                # raw format columns:
                # (1) count of requests in statistics
                # (2) running time         (usec)
                # (3) requests per second  (iops)
                # (4) transfer speed       (bytes/sec)
                # (5) minimal request time (usec)
                # (6) average request time (usec)
                # (7) maximum request time (usec)
                # (8) request time standard deviation (usec)
                # (9) total requests       (including too slow and too fast)
                # (10) total running time  (usec)
                #
                read req_count time_usec iops bytes_per_sec minimal_req_time avg_req_time max_req_time stddev_req_time total_requests total_run_time \
                    <<< $(ioping -R -s ${blocksize} ${mountpoint} -B)
                #####   1          2      3        4           5                 6            7              8                9             10
                if [[ "${debug}" -gt 0 ]]; then
                    echo "[DEBUG] Running command: 'echo \"scale=2;${time_usec}/10000000\" | bc'"
                    echo "[DEBUG] Running command: 'echo \"scale=2;${minimal_req_time}/1000000\" | bc'"
                    echo "[DEBUG] Running command: 'echo \"scale=2;${avg_req_time}/1000000\" | bc'"
                    echo "[DEBUG] Running command: 'echo \"scale=2;${max_req_time}/1000000\" | bc'"
                    echo "[DEBUG] Running command: 'echo \"scale=2;${stddev_req_time}/1000000\" | bc'"
                    echo "[DEBUG] Running command: 'echo ${bytes_per_sec} | numfmt --to=iec'"
                    echo "[DEBUG] Running command: 'echo ${iops} | numfmt --to=si'"
                fi

                tme=$(echo "scale=2;${time_usec}/10000000" | bc)
                minimal_req_time=$(echo "scale=2;${minimal_req_time}/1000000" | bc)
                avg_req_time=$(echo "scale=2;${avg_req_time}/1000000" | bc)
                max_req_time=$(echo "scale=2;${max_req_time}/1000000" | bc)
                stddev_req_time=$(echo "scale=2;${stddev_req_time}/1000000" | bc)
                mbps=$(echo ${bytes_per_sec} | numfmt --to=iec)
                iops=$(echo ${iops} | numfmt --to=si)
                echo "[${blocksize}] ${mbps}B/s, ${iops} iops"
                [[ $debug -gt 0 ]] && \
                    echo "[DEBUG] ${req_count} requests/${iops} IOPS (time:min/avg/max/stddev): ${tme}s/${minimal_req_time}ms/${avg_req_time}ms/${max_req_time}ms/${stddev_req_time}ms"
            fi
        done
    done
else
    echo "Not a debian-based system"
fi
